//almost everything works, minute changes are supposed to be done like entering file names for different colors, pause and beck to menu works the only thing that doesnt work is the return function and the exceptino thrown. if that fixes all is done.












#include "Header.h"
struct Player
{
	string name;
	int score[10] = { 0 };
	int level = 1;
}player_info;
struct snake {
	int x;
	int y;
}S;
struct body {
	int x;
	int y;
}B[500];
sf::RectangleShape Apple_Shape(sf::Vector2f(30.0f, 30.0f));
sf::RectangleShape Up_Border(sf::Vector2f(1060.0f, 15.0f));
sf::RectangleShape Down_Border(sf::Vector2f(1075.0f, 15.0f));
sf::RectangleShape Left_Border(sf::Vector2f(15.0f, 720.0f));
sf::RectangleShape Right_Border(sf::Vector2f(15.0f, 720.0f));
sf::RectangleShape Snake_Head(sf::Vector2f(30.0f, 30.0f));
sf::RectangleShape Snake_Body(sf::Vector2f(30.0f, 30.0f));
sf::Texture Apple_Texture;
sf::Texture Snake_Head_Texture;
sf::Texture Snake_Body_Texture;
sf::Texture Background_Texture;
sf::Texture Foreground_Texture;
sf::Sprite Back_Image;
sf::Sprite Fore_Image;
sf::Vector2f Up_Border_Loc, Down_Border_Loc, Left_Border_Loc, Right_Border_Loc, Snake_Head_Loc, Apple_Loc;
int X = 15, Y = 15, num = 1, dir = 4, I = 1;
bool c = 0, p = 0;
bool scorecounter = 1;
float X_Offset_Fore_Img = 125, Y_Offset_Fore_Img = 140;
string Snake_Color = "B", Back_Color = "G", Font_Type = "Roboto", Apple_Color = "R";
bool Collision_Detection(sf::Vector2f Snake_Head_Loc, sf::Vector2f Up_Border_Loc, sf::Vector2f Down_Border_Loc, sf::Vector2f Left_Border_Loc, sf::Vector2f Right_Border_Loc)
{
	if (Snake_Head_Loc.x <= Up_Border_Loc.x - 15)
	{
		return 0;
	}
	if (Snake_Head_Loc.x >= 1150)
	{
		return 0;
	}
	if (Snake_Head_Loc.y <= 150)
	{
		return 0;
	}
	if (Snake_Head_Loc.y >= 840)
	{
		return 0;
	}
	else return 1;
}
string Player_Input()
{

	string pname;
	ofstream plout("store_info1.dat", ios::binary | ios::app);
	ifstream plin("store_info1.dat", ios::binary);
	bool var = 0;
	cout << "Enter name of the player-\n";
	cin >> pname;
	while(!plin.eof())
	{
		plin.read((char*)& player_info, sizeof(player_info));
		if (pname == player_info.name)
		{
			cout << "player exists";
			var = 1;
			plin.close();
			plout.close();
			return pname;
		}
	}
	if (var == 0)
	{
		player_info.name = pname;
		plin.close();
		plout.write((char*)&player_info, sizeof(player_info));
		cout << "\nName saved ";
		plout.close();
		return pname;
	}

}
void Move_Snake(int dir)
{
	if (dir == 0)
	{
		Snake_Head_Texture.loadFromFile("snakeL.png");
		Snake_Body_Texture.loadFromFile("RbodyL.png");
		S.x -= 1;
	}
	if (dir == 1)
	{
		Snake_Head_Texture.loadFromFile("snakeU.png");
		Snake_Body_Texture.loadFromFile("RbodyU.png");
		S.y -= 1;
	}
	if (dir == 2)
	{
		Snake_Head_Texture.loadFromFile("snake.png");
		Snake_Body_Texture.loadFromFile("Rbody.png");
		S.x += 1;
	}
	if (dir == 3)
	{
		Snake_Head_Texture.loadFromFile("snakeD.png");
		Snake_Body_Texture.loadFromFile("RbodyD.png");
		S.y += 1;
	}
}
void Delay(int millisecond)
{
	bool a = 0;
	sf::Clock clock;
	while (a == 0)
	{
		sf::Time T1, T2;
		sf::Time delay = sf::milliseconds(millisecond);
		T1 = clock.getElapsedTime();
		if (T1.asMilliseconds() < delay.asMilliseconds())
		{
			a = 0;
		}
		else
		{
			a = 1;
		}
	}
}
int Gameplay(int Max_Score, int time_in_milliseconds, int Level_No, int Pre_Player_Loc, string playername)
{
	//ofstream plout;
	///plout.open("store_info1.dat", ios::binary | ios::app);
	int temp;
	Player playing;
	temp = sizeof(playing);
	ifstream plin;
	int var = 0;
	plin.open("store_info1.dat", ios::binary);
	plin.seekg(0);
	for (; var == 0;)
	{
		plin.read((char*)& playing, sizeof(playing));
		if (playername == playing.name)
		{
			var = 1;
		}
	}
	plin.close();
	sf::Font font;
	sf::Font fonthead;
	fstream fcom;
	fcom.open("store_info1.dat", ios::binary | ios::in | ios::out);
	switch (Level_No)
	{
		case 2 : 		
			playing.level = 2;
			fcom.seekp((Pre_Player_Loc - 1) * temp, ios::beg);
			fcom.write((char*)& playing, sizeof(playing));
			break;
		case 3 : 		
			playing.level = 3;
			fcom.seekp((Pre_Player_Loc - 1) * temp, ios::beg);
			fcom.write((char*)& playing, sizeof(playing));
			break;
		case 4 : 		
			playing.level = 4;
			fcom.seekp((Pre_Player_Loc - 1) * temp, ios::beg);
			fcom.write((char*)& playing, sizeof(playing));
			break;
		case 5 : 		
			playing.level = 5;
			fcom.seekp((Pre_Player_Loc - 1) * temp, ios::beg);
			fcom.write((char*)& playing, sizeof(playing));
			break;
		case 6 : 		
			playing.level = 6;
			fcom.seekp((Pre_Player_Loc - 1) * temp, ios::beg);
			fcom.write((char*)& playing, sizeof(playing));
			break;
		case 7 : 		
			playing.level = 7;
			fcom.seekp((Pre_Player_Loc - 1) * temp, ios::beg);
			fcom.write((char*)& playing, sizeof(playing));
			break;
		case 8 : 		
			playing.level = 8;
			fcom.seekp((Pre_Player_Loc - 1) * temp, ios::beg);
			fcom.write((char*)& playing, sizeof(playing));
			break;
		case 9 : 		
			playing.level = 9;
			fcom.seekp((Pre_Player_Loc - 1) * temp, ios::beg);
			fcom.write((char*)& playing, sizeof(playing));
			break;
		case 10 : 		
			playing.level = 10;
			fcom.seekp((Pre_Player_Loc - 1) * temp, ios::beg);
			fcom.write((char*)& playing, sizeof(playing));
			break;
	}
	fcom.close();
	fonthead.loadFromFile("Roboto-Thin.ttf");
	if (Font_Type == "Roboto")
	{
		font.loadFromFile("Roboto-thin.ttf");
	}
	else if (Font_Type == "Consolas")
	{
		font.loadFromFile("Consolas.ttf");
	}
	else if (Font_Type == "Calibre")
	{
		font.loadFromFile("Calibre.ttf");
	}
	else if (Font_Type == "TimesNewRoman")
	{
		font.loadFromFile("TimesNewRoman.ttf");
	}
	else if (Font_Type == "Arial")
	{
		font.loadFromFile("Arial.ttf");
	}


	if (Apple_Color == "R")
	{
		Apple_Texture.loadFromFile("apple3.png");
	}
	else if (Apple_Color == "B")
	{
		Apple_Texture.loadFromFile("apple3.png");
	}
	else if (Apple_Color == "W")
	{
		Apple_Texture.loadFromFile("apple3.png");
	}
	else if (Apple_Color == "C")
	{
		Apple_Texture.loadFromFile("apple3.png");
	}


	if (Snake_Color == "B")
	{
		Snake_Head_Texture.loadFromFile("snakeL.png");
		Snake_Body_Texture.loadFromFile("RbodyL.png");
	}
	else if (Snake_Color == "G")
	{
		Snake_Body_Texture.loadFromFile("Snake_Body_Texture.png");
		Snake_Body_Texture.loadFromFile("Snake_Body_Texture.png");
	}
	else if (Snake_Color == "R")
	{
		Snake_Body_Texture.loadFromFile("Snake_Body_Texture.png");
		Snake_Body_Texture.loadFromFile("Snake_Body_Texture.png");
	}
	else if (Snake_Color == "W")
	{
		Snake_Body_Texture.loadFromFile("Snake_Body_Texture.png");
		Snake_Body_Texture.loadFromFile("Snake_Body_Texture.png");
	}
	else if (Snake_Color == "Y")
	{
		Snake_Body_Texture.loadFromFile("Snake_Body_Texture.png");
		Snake_Body_Texture.loadFromFile("Snake_Body_Texture.png");
	}
	else if (Snake_Color == "R")
	{
		Snake_Body_Texture.loadFromFile("Snake_Body_Texture.png");
		Snake_Body_Texture.loadFromFile("Snake_Body_Texture.png");
	}

	if (Back_Color == "B")
	{
		assert(Background_Texture.loadFromFile("back.jpg"));
		assert(Foreground_Texture.loadFromFile("frimg.png"));
	}
	else if (Back_Color == "G")
	{
		assert(Background_Texture.loadFromFile("back.jpg"));
		assert(Foreground_Texture.loadFromFile("frimg.png"));
	}
	else if (Back_Color == "R")
	{
		assert(Background_Texture.loadFromFile("back.jpg"));
		assert(Foreground_Texture.loadFromFile("frimg.png"));
	}
	else if (Back_Color == "W")
	{
		assert(Background_Texture.loadFromFile("back.jpg"));
		assert(Foreground_Texture.loadFromFile("frimg.png"));
	}
	else if (Back_Color == "Y")
	{
		assert(Background_Texture.loadFromFile("back.jpg"));
		assert(Foreground_Texture.loadFromFile("frimg.png"));
	}
	else if (Back_Color == "R")
	{
		assert(Background_Texture.loadFromFile("back.jpg"));
		assert(Foreground_Texture.loadFromFile("frimg.png"));
	}
	int Total_Score = 0;
	Apple_Shape.setTexture(&Apple_Texture);
	Snake_Head.setTexture(&Snake_Head_Texture);
	Snake_Body.setTexture(&Snake_Body_Texture);
	Up_Border_Loc.x = 125.0f;
	Up_Border_Loc.y = 140.0f;
	Down_Border_Loc.x = 125.0f;
	Down_Border_Loc.y = 860.0f;
	Left_Border_Loc.x = 125.0f;
	Left_Border_Loc.y = 140.0f;
	Right_Border_Loc.x = 1185.0f;
	Right_Border_Loc.y = 140.0f;
	int sizex = 30;
	int sizey = 30;
	bool a = 1, w = 1, s = 1, d = 1;
	sf::RenderWindow window(sf::VideoMode(1920, 1000), "SFML TUTORIAL", sf::Style::Close | sf::Style::Resize);
	S.x = 20;
	S.y = 20;
	Back_Image.setTexture(Background_Texture);
	Fore_Image.setTexture(Foreground_Texture);
	Snake_Head.setFillColor(sf::Color::White);
	Snake_Body.setFillColor(sf::Color::White);
	Apple_Shape.setFillColor(sf::Color::White);
	Up_Border.setFillColor(sf::Color::Green);
	Down_Border.setFillColor(sf::Color::Green);
	Left_Border.setFillColor(sf::Color::Green);
	Right_Border.setFillColor(sf::Color::Green);
	Fore_Image.setOrigin(-X_Offset_Fore_Img, -Y_Offset_Fore_Img);
	Up_Border.setOrigin(-Up_Border_Loc.x, -Up_Border_Loc.y);
	Down_Border.setOrigin(-Down_Border_Loc.x, -Down_Border_Loc.y);
	Left_Border.setOrigin(-Left_Border_Loc.x, -Left_Border_Loc.y);
	Right_Border.setOrigin(-Right_Border_Loc.x, -Right_Border_Loc.y);
	Snake_Head.setOrigin(-Snake_Head_Loc.x, -Snake_Head_Loc.y);
	Apple_Shape.setOrigin(-Apple_Loc.x, -Apple_Loc.y);
	while (window.isOpen())
	{
		plin.open("store_info1.dat", ios::binary);
		plin.seekg((Pre_Player_Loc - 1) * temp, ios::beg);
		plin.read((char*)&playing, sizeof(playing));
		Delay(time_in_milliseconds);
		if (scorecounter == 1)
		{
			Total_Score = 0;
			for (int j = 0; j < 10; j++)
			{
				Total_Score += playing.score[j];
			}
		}
		scorecounter = 0;
		plin.close();
		sf::Text Game_Name;
		Game_Name.setFont(fonthead);
		Game_Name.setString("SNAKE XENSIA");
		Game_Name.setCharacterSize(100);
		Game_Name.setFillColor(sf::Color::Black);
		Game_Name.setStyle(sf::Text::Style::Bold);
		Game_Name.setOrigin(-550, 0);
		sf::Text Player_Name;
		Player_Name.setFont(font);
		Player_Name.setString("Name : ");
		Player_Name.setCharacterSize(70);
		Player_Name.setFillColor(sf::Color::Black);
		Player_Name.setStyle(sf::Text::Style::Regular);
		Player_Name.setOrigin(-1300, -180);
		Player_Name.setFont(font);
		sf::Text Player_Name_Name;
		const char * cs = playing.name.c_str();
		Player_Name_Name.setFont(font);
		Player_Name_Name.setString(cs);
		Player_Name_Name.setCharacterSize(70);
		Player_Name_Name.setFillColor(sf::Color::Red);
		Player_Name_Name.setStyle(sf::Text::Style::Bold);
		Player_Name_Name.setOrigin(-1550, -180);
		Player_Name_Name.setFont(font);
		sf::Text Cur_Level;
		Cur_Level.setFont(font);
		Cur_Level.setString("Level : ");
		Cur_Level.setCharacterSize(70);
		Cur_Level.setFillColor(sf::Color::Black);
		Cur_Level.setStyle(sf::Text::Style::Regular);
		Cur_Level.setOrigin(-1300, -280);
		Cur_Level.setFont(font);
		sf::Text Cur_Level_No;
		Cur_Level_No.setFont(font);
		Cur_Level_No.setString(to_string(playing.level));
		Cur_Level_No.setCharacterSize(70);
		Cur_Level_No.setFillColor(sf::Color::Red);
		Cur_Level_No.setStyle(sf::Text::Style::Bold);
		Cur_Level_No.setOrigin(-1550, -280);
		Cur_Level_No.setFont(font);
		sf::Text Cur_Level_Score;
		Cur_Level_Score.setFont(font);
		Cur_Level_Score.setString("Level Score : ");
		Cur_Level_Score.setCharacterSize(70);
		Cur_Level_Score.setFillColor(sf::Color::Black);
		Cur_Level_Score.setStyle(sf::Text::Style::Regular);
		Cur_Level_Score.setOrigin(-1300, -380);
		sf::Text Cur_Level_Score_No;
		Cur_Level_Score_No.setFont(font);
		Cur_Level_Score_No.setString(to_string(playing.score[Level_No-1]));
		Cur_Level_Score_No.setCharacterSize(70);
		Cur_Level_Score_No.setFillColor(sf::Color::Red);
		Cur_Level_Score_No.setStyle(sf::Text::Style::Bold);
		Cur_Level_Score_No.setOrigin(-1760, -380);
		sf::Text Player_High_Score;
		Player_High_Score.setFont(font);
		Player_High_Score.setString("Total Score : ");
		Player_High_Score.setCharacterSize(70);
		Player_High_Score.setFillColor(sf::Color::Black);
		Player_High_Score.setStyle(sf::Text::Style::Regular);
		Player_High_Score.setOrigin(-1300, -480);
		sf::Text Player_High_Score_No;
		Player_High_Score_No.setFont(font);
		Player_High_Score_No.setString(to_string(Total_Score));
		Player_High_Score_No.setCharacterSize(70);
		Player_High_Score_No.setFillColor(sf::Color::Red);
		Player_High_Score_No.setStyle(sf::Text::Style::Bold);
		Player_High_Score_No.setOrigin(-1760, -480);
		sf::Text Pause_Game;
		Pause_Game.setFont(font);
		Pause_Game.setString("Pause Game (Space)");
		Pause_Game.setCharacterSize(70);
		Pause_Game.setFillColor(sf::Color::Blue);
		Pause_Game.setStyle(sf::Text::Style::Regular);
		Pause_Game.setOrigin(-1300, -580);
		sf::Text Exit;
		Exit.setFont(font);
		Exit.setString("Back To Menu (B)");
		Exit.setCharacterSize(70);
		Exit.setFillColor(sf::Color::Blue);
		Exit.setStyle(sf::Text::Style::Regular);
		Exit.setOrigin(-1300, -680);
		sf::Event evnt;
		while (window.pollEvent(evnt))
		{
			switch (evnt.type)
			{
			case sf::Event::Closed:
				window.close();
				break;
			case sf::Event::Resized:
				//printf("new window width : %i new window height : %i", evnt.size.width, evnt.size.height);
				break;
			case sf::Event::TextEntered:
				if (evnt.text.unicode < 128)
				{
					//printf("%c", evnt.text.unicode);
				}
			}
		}
		fcom.open("store_info1.dat", ios::binary | ios::in | ios::out);
		if (S.x == X && S.y == Y)
		{
			srand(time(0));
			cout << "collision detected";
			X = (rand() % 36) + 5;
			Y = (rand() % 15) + 5;
			Apple_Shape.setPosition(X, Y);
			playing.score[Level_No - 1]++;
			fcom.seekp((Pre_Player_Loc - 1) * temp, ios::beg);
			fcom.write((char*)& playing, sizeof(playing));
			num++;
			scorecounter = 1;
		}
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::B))
		{
			window.close();
			fcom.close();
			plin.close();
			return 2;
		}
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::C))
		{
			p = 0;
		}
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space))
		{
			p = 1;
		}
		if (p == 1)
		{
			continue;
		}
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::A) && a == 1 && d == 1)
		{
			dir = 0;
			a = 0;
			w = 1;
			s = 1;
			d = 1;
		}
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::W) && w == 1 && s == 1)
		{
			dir = 1;
			a = 1;
			w = 0;
			s = 1;
			d = 1;
		}
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::S) && s == 1 && w == 1)
		{
			dir = 3;
			a = 1;
			w = 1;
			s = 0;
			d = 1;
		}
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::D) && d == 1 && a == 1)
		{
			dir = 2;
			a = 1;
			w = 1;
			s = 1;
			d = 0;
		}
		for (int i = num; i > 0; i--)
		{
			if (i > 1)
			{
				B[i].x = B[i - 1].x;
				B[i].y = B[i - 1].y;
			}
			else
			{
				B[1].y = S.y;
				B[1].x = S.x;
			}
		}
		Move_Snake(dir);
		if (num > 3)
		{
			for (int i = 4; i < num; i++)
			{
				if (S.x == B[i].x && S.y == B[i].y)
				{
					window.close();
					plin.close();
					return 0;
				}
			}
		}
		if (I == 1)
		{
			Snake_Head.setPosition(500, 500);
			I++;
		}
		Snake_Head_Loc = Snake_Head.getPosition();
		bool win;
		win = Collision_Detection(Snake_Head_Loc, Up_Border_Loc, Down_Border_Loc, Left_Border_Loc, Right_Border_Loc);
		if (win == 0)
		{
			window.close();
			plin.close();
			return 0;
		}
		fcom.close();
		if (playing.score[Level_No - 1] == Max_Score)
		{
			return 1;
		}
		plin.close();
		Apple_Shape.setPosition(X*sizex, Y*sizey);
		window.clear(sf::Color::White);
		window.draw(Back_Image);
		window.draw(Fore_Image);
		window.draw(Up_Border);
		window.draw(Down_Border);
		window.draw(Left_Border);
		window.draw(Right_Border);
		Snake_Head.setPosition(sizex*S.x, sizey*S.y);
		window.draw(Snake_Head);
		window.draw(Apple_Shape);
		for (int i = 1; i < num; i++)
		{
			Snake_Body.setPosition(sizex*B[i].x, sizey*B[i].y);
			window.draw(Snake_Body);
		}
		window.draw(Game_Name);
		window.draw(Cur_Level);
		window.draw(Cur_Level_No);
		window.draw(Cur_Level_Score);
		window.draw(Cur_Level_Score_No);
		window.draw(Player_Name);
		window.draw(Player_Name_Name);
		window.draw(Player_High_Score);
		window.draw(Player_High_Score_No);
		window.draw(Pause_Game);
		window.draw(Exit);
		window.display();
	}
	return 0;
}
void Scoreboard()
{
	ifstream plin("store_info1.dat", ios::binary);
	Player playing;
	int highscore = 0;;
	system("cls");
	cout << "Welcome to the ScoreBoard";
	cout << endl;
	cout << "Here are the scores sorted based on the High Score";
	cout << endl;
	cout << "===================================================================================";
	cout << endl;
	cout << "PLAYER NAME          \t|\tHIGH SCORE          \t|\tLAST LEVEL PASSED   \t|\t";
	cout << endl;
	cout << "===================================================================================";
	while (!plin.eof())
	{
		plin.read((char*)&playing, sizeof(playing));
		for (int j = 0; j < 10; j++)
		{
			highscore += playing.score[j];
		}
		cout << endl;
		cout << playing.name << "\t\t\t\t" << highscore << "\t\t\t" << playing.level-1;
		highscore = 0;
	}
	cout << endl;
	cout << "Press any key to go back";
	_getch();
	plin.close();
}
int Settings()
{
	char ch, ch1, ch2, ch3;
	system("cls");
	cout << endl;
	cout << "Welcome to the settings";
	cout << endl;
	cout << "Choose What you want to change";
	cout << "1. Change Snake Color";
	cout << endl;
	cout << "2. Change Game Background";
	cout << endl;
	cout << "3. Change Font";
	cout << endl;
	cout << "4. Change Apple";
	cout << endl;
	cout << "5. Back to Main Menu";
	cout << endl;
	cin >> ch;
	if (ch == '1')
	{
		system("cls");
		cout << endl;
		cout << "Choose the Color You Want The Snake To Be";
		cout << endl;
		cout << "1. Blue";
		cout << endl;
		cout << "2. Green";
		cout << endl;
		cout << "3. Red";
		cout << endl;
		cout << "4. White";
		cout << endl;
		cout << "5. Yellow";
		cout << endl;
		cin >> ch1;
		switch (ch1)
		{
		case '1':
			Snake_Color = "B";
			break;
		case '2':
			Snake_Color = "G";
			break;
		case '3':
			Snake_Color = "R";
			break;
		case '4':
			Snake_Color = "W";
			break;
		case '5':
			Snake_Color = "Y";
			break;
		default: cout << "Option Does Not Exist";
		}
		cout << endl;
		cout << "Changed Successfully";
		return 1;
	}
	else if (ch == '2')
	{
		system("cls");
		cout << endl;
		cout << "Choose The Background Color";
		cout << endl;
		cout << "1. Blue";
		cout << endl;
		cout << "2. Green";
		cout << endl;
		cout << "3. Red";
		cout << endl;
		cout << "4. White";
		cout << endl;
		cout << "5. Yellow";
		cout << endl;
		cin >> ch2;
		switch (ch2)
		{
		case '1':
			Back_Color = "B";
			break;
		case '2':
			Back_Color = "G";
			break;
		case '3':
			Back_Color = "R";
			break;
		case '4':
			Back_Color = "W";
			break;
		case '5':
			Back_Color = "Y";
			break;
		default:cout << "Option Does Not Exist";
		}
		cout << endl;
		cout << "Changed Successefully";
		return 1;
	}
	else if (ch == '3')
	{
		system("cls");
		cout << endl;
		cout << "Choose The Font";
		cout << endl;
		cout << "1. Roboto";
		cout << endl;
		cout << "2. Arial";
		cout << endl;
		cout << "3. TimesNewRoman";
		cout << endl;
		cout << "4. Consolas";
		cout << endl;
		cout << "5. Calibre";
		cout << endl;
		cin >> ch3;
		switch (ch3)
		{
		case '1':
			Font_Type = "Roboto.ttf";
			break;
		case '2':
			Font_Type = "Arial.ttf";
			break;
		case '3':
			Font_Type = "TimesNewRoman.ttf";
			break;
		case '4':
			Font_Type = "Consolas.ttf";
			break;
		case '5':
			Font_Type = "Calibre.ttf";
			break;
		default:cout << "Option Does Not Exist";
		}
		cout << endl;
		cout << "Changed Successefully";
		return 1;
	}
	else if (ch == '4')
	{
		system("cls");
		cout << endl;
		cout << "Choose The Color of the Apple";
		cout << endl;
		cout << "1. Red";
		cout << endl;
		cout << "2. Black";
		cout << endl;
		cout << "3. White";
		cout << endl;
		cout << "4. Custom";
		cout << endl;
		cin >> ch1;
		switch (ch1)
		{
		case '1':
			Apple_Color = "R";
			break;
		case '2':
			Apple_Color = "B";
			break;
		case '3':
			Apple_Color = "w";
			break;
		case '4':
			Apple_Color = "C";
			break;
		default:cout << "Option Does Not Exist";
		}
		cout << endl;
		cout << "Changed Successefully";
		return 1;
	}
	else if (ch == '5')
	{
		return 1;
	}
	else return 1;
}
int Game_Play_Manip(string Player_Name)
{
	int cur_level;
	Player playing, playing1;
	fstream fcom;
	fcom.open("store_info1.dat", ios::binary | ios::in | ios::out | ios::ate);
	bool var = 0;
	int Pre_Player_Loc;
	fcom.seekg(0);
	for (int i = 1; var == 0; i++)
	{
		fcom.read((char*)& playing, sizeof(playing));
		if (Player_Name == playing.name)
		{
			var = 1;
			Pre_Player_Loc = i;
		}
	}
	bool result = 1;
	do
	{
		cur_level = playing.level;
		if (cur_level == 1)
		{
			result = Gameplay(10, 50, 1, Pre_Player_Loc);
			if (result == 1)
				cout << "\nyou won the first GamePlay\n";
			else
				cout << "You Lost";
		}
		else if (cur_level == 2)
		{
			result = Gameplay(12, 45, 2, Pre_Player_Loc);
			if (result == 1)
				cout << "you won the Second GamePlay";
			else
				cout << "sorry you lost bro/sis";
		}
		else if (cur_level == 3)
		{
			//result = Gameplay(14, 40, 3, Pre_Player_Loc);
			if (result == 1)
				cout << "you won the Third GamePlay";
			else
				cout << "sorry you lost bro/sis";
		}
		else if (cur_level == 4)
		{
			result = Gameplay(16, 40, 4, Pre_Player_Loc, Player_Name);
			if (result == 1)
			{
				cout << "you won the Fourth GamePlay";
			}
			else
				cout << "sorry you lost bro/sis";
		}
		else if (cur_level == 5)
		{
			result = Gameplay(18, 35, 5, Pre_Player_Loc, Player_Name);
			if (result == 1)
				cout << "you won the Fifth GamePlay";
			else
				cout << "sorry you lost bro/sis";
		}
		else if (cur_level == 6)
		{
			result = Gameplay(20, 35, 6, Pre_Player_Loc, Player_Name);
			if (result == 1)
				cout << "you won the Sixth GamePlay";
			else
				cout << "sorry you lost bro/sis";
		}
		else if (cur_level == 7)
		{
			result = Gameplay(22, 35, 7, Pre_Player_Loc, Player_Name);
			if (result == 1)
				cout << "you won the Seventh GamePlay";
			else
				cout << "sorry you lost bro/sis";
		}
		else if (cur_level == 8)
		{
			result = Gameplay(24, 30, 8, Pre_Player_Loc, Player_Name);
			if (result == 1)
				cout << "you won the Eighth GamePlay";
			else
				cout << "sorry you lost bro/sis";
		}
		else if (cur_level == 9)
		{
			result = Gameplay(26, 25, 9, Pre_Player_Loc, Player_Name);
			if (result == 1)
				cout << "you won the Ninth GamePlay";
			else
				cout << "sorry you lost bro/sis";
		}
		else if (cur_level == 10)
		{
			result = Gameplay(28, 20, 10, Pre_Player_Loc, Player_Name);

			if (result == 1)
				cout << "you won the Last GamePlay";
			else
				cout << "sorry you lost bro/sis";
		}
		if (result == 1)
		{
			playing.level++;
			int temp = sizeof(playing);
			fcom.seekp((Pre_Player_Loc - 1) * temp, ios::beg);
			fcom.write((char*)& playing, sizeof(playing));
		}
	} while (result == 1 && cur_level <= 10);
	if (result == 0)
	{
		cout << "you lost";
		return 0;
	}
	else return 1;
	fcom.close();

}
void Main_Menu()
{
	int  ch;
	string name;
	int result = 0;
	do
	{
		cout << "\t\t\t\t***************\n";
		cout << "\t\t\t\tSNAKE XENSIA\n";
		cout << "\t\t\t\t****************\n\n";
		cout << "\t\t\t\tPLAY GAME(1)\n";
		cout << "\t\t\t\tSETTINGS(2)\n";
		cout << "\t\t\t\tSCORE BOARD(3)\n";
		cout << "\t\t\t\tQUIT(4)\n";
		cin >> ch;
		int win = 0;
		switch (ch)
		{
		case 1: name = Player_Input();
			result = Game_Play_Manip(name);
			break;
		case 2: result = Settings();
			break;
		case 3: Scoreboard();
			break;
		case 4: result = 0;
			break;
		default: cout << "Such option does not exit";
		}

	} while (result == 1);
	cout << "Thank You For Playing Snake XenSia";
	cout << endl;
}
int main()
{
	Main_Menu();
	_getch();
	return 0;

}
